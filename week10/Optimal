#include <stdio.h>
#include <stdbool.h>
#include <limits.h>

#define FRAME_SIZE 3

// Function to check if a page is already present in the frame
bool isPagePresent(int page, int frame[], int frameSize) {
    for (int i = 0; i < frameSize; ++i) {
        if (frame[i] == page) {
            return true;
        }
    }
    return false;
}

// Function to display the contents of the frame
void displayFrame(int frame[], int frameSize) {
    printf("Current Frame: ");
    for (int i = 0; i < frameSize; ++i) {
        if (frame[i] == -1) {
            printf("[ ] ");
        } else {
            printf("[%d] ", frame[i]);
        }
    }
    printf("\n");
}

// Function to find the page that will not be used for the longest period in the future
int findOptimalIndex(int referenceString[], int numPages, int frame[], int frameSize, int startIndex) {
    int farthest = -1;
    int optimalIndex = -1;
    
    for (int i = 0; i < frameSize; ++i) {
        int j;
        for (j = startIndex; j < numPages; ++j) {
            if (frame[i] == referenceString[j]) {
                if (j > farthest) {
                    farthest = j;
                    optimalIndex = i;
                }
                break;
            }
        }
        // If the page is not referenced in future, return its index
        if (j == numPages) {
            return i;
        }
    }
    
    // If all pages are referenced in future, return the optimal index found
    if (optimalIndex == -1) {
        return 0;
    } else {
        return optimalIndex;
    }
}

int main() {
    int referenceString[] = {1, 2, 3, 4, 1, 2, 5, 1, 2, 3, 4, 5};
    int numPages = sizeof(referenceString) / sizeof(referenceString[0]);
    
    int frame[FRAME_SIZE];
    
    // Initialize frame with -1 indicating empty slots
    for (int i = 0; i < FRAME_SIZE; ++i) {
        frame[i] = -1;
    }
    
    int pageFaults = 0;
    
    printf("Reference String: ");
    for (int i = 0; i < numPages; ++i) {
        printf("%d ", referenceString[i]);
    }
    printf("\n\n");
    
    for (int i = 0; i < numPages; ++i) {
        int currentPage = referenceString[i];
        
        // If page is not already present in frame, it's a page fault
        if (!isPagePresent(currentPage, frame, FRAME_SIZE)) {
            int optimalIndex = findOptimalIndex(referenceString, numPages, frame, FRAME_SIZE, i + 1);
            frame[optimalIndex] = currentPage;
            
            pageFaults++;
            displayFrame(frame, FRAME_SIZE);
        } else {
            displayFrame(frame, FRAME_SIZE);
        }
    }
    
    printf("\nTotal Page Faults: %d\n", pageFaults);
    
    return 0;
}
